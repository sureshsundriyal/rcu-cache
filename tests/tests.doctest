    >>> from rcu import *

Initialize an RCUCache.
    >>> x = RCUCache()

Make sure that the RCU algorithm is working for addition.
    >>> pre_address = id(x.odict)
    >>> x[1] = 2
    >>> post_address = id(x.odict)
    >>> pre_address != post_address
    True
    >>> x[2] = 3
    >>> x
    RCUCache(maxsize=None, items=OrderedDict([(1, 2), (2, 3)]))
    >>> x[2]
    3

Make sure deletion of elements works fine.
    >>> del x[2]
    >>> x
    RCUCache(maxsize=None, items=OrderedDict([(1, 2)]))

Make sure copy works fine.
    >>> y = x.copy()
    >>> y
    RCUCache(maxsize=None, items=OrderedDict([(1, 2)]))

Make sure we can pickle/unpickle the objects.
    >>> import pickle
    >>> z = pickle.dumps(y)
    >>> pickle.loads(z)
    RCUCache(maxsize=None, items=OrderedDict([(1, 2)]))

Update the object.
    >>> y.update({ 1:4, 5:6 })
    >>> y
    RCUCache(maxsize=None, items=OrderedDict([(1, 4), (5, 6)]))

Initialize an RCUCache object with initial objects.
    >>> x = RCUCache(items={ 1:2, 2:3 })
    >>> x
    RCUCache(maxsize=None, items=OrderedDict([(1, 2), (2, 3)]))

Clear out all the items and make sure the RCU algorithm is working.
    >>> pre_address = id(x.odict)
    >>> x.clear()
    >>> post_address = id(x.odict)
    >>> pre_address != post_address
    True
    >>> len(x)
    0

Make sure that the object is immutable and cannot be extended.
    >>> x.foo = 'foo'
    Traceback (most recent call last):
    ...
    TypeError: RCUCache is immutable

Make sure that the tests for membership is disabled.
    >>> x[1] = 2
    >>> 1 in x #doctest:+IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    TypeError: Directly access the RCUCache members to test for membership.

Test pop().
    >>> pre_address = id(x.odict)
    >>> x.pop(1)
    2
    >>> post_address = id(x.odict)
    >>> pre_address != post_address
    True

Test popitem().
    >>> x[1] = 2
    >>> x[2] = 3
    >>> pre_address = id(x.odict)
    >>> x.popitem(last=False)
    (1, 2)
    >>> post_address = id(x.odict)
    >>> pre_address != post_address
    True
    >>> x[1] = 2
    >>> x.popitem()
    (1, 2)

Test the RCU eviction.
    >>> x = RCUCache(maxsize=2)
    >>> x[2] = 1
    >>> x[3] = 4
    >>> x
    RCUCache(maxsize=2, items=OrderedDict([(2, 1), (3, 4)]))

Now add another element and make sure one of them gets evicted.
    >>> x[5] = 6
    >>> x
    RCUCache(maxsize=2, items=OrderedDict([(3, 4), (5, 6)]))

Update with more elements than possible in the list.
    >>> from collections import OrderedDict
    >>> y = OrderedDict()
    >>> y[1] = 4
    >>> y[5] = 6
    >>> y[7] = 8
    >>> y[9] = 10
    >>> x.update(y)
    >>> x
    RCUCache(maxsize=2, items=OrderedDict([(7, 8), (9, 10)]))

Make sure that the maxsize is honored.
    >>> len(x)
    2

Make sure len(x) returns the length of the encapsulated OrderedDict.
    >>> len(x) == len(x.odict)
    True

Test multi-threaded insertion/eviction
    >>> import threading

    >>> cache = RCUCache(maxsize=10)

    >>> def add_worker(step=0):
    ...     for i in range(step, 10000):
    ...        cache[i] = i

    >>> threads = []
    >>> for i in range(3):
    ...     # Make sure that at least two of them are starting with the same
    ...     # offset.
    ...     t = threading.Thread(target=add_worker, args=(i if i<2 else 0,))
    ...     threads.append(t)
    ...     t.start()

    >>> for t in threads:
    ...     t.join()

    >>> len(cache)
    10
    >>> cache # doctest: +NORMALIZE_WHITESPACE
    RCUCache(maxsize=10, items=OrderedDict([(9990, 9990), (9991, 9991),
    (9992, 9992), (9993, 9993), (9994, 9994), (9995, 9995), (9996, 9996),
    (9997, 9997), (9998, 9998), (9999, 9999)]))

Test the iterator.
    >>> x = RCUCache(maxsize=2)
    >>> x[1] = 100
    >>> x[2] = 200
    >>> for i in x:
    ...     print(i)
    1
    2

Make sure the iterator provides a snapshot, instead of the actual underlying
structure.
    >>> y = iter(x)
    >>> x[3] = 300
    >>> list(y)
    [1, 2]

Test the items method.
    >>> for i in x.items():
    ...     print(i)
    (2, 200)
    (3, 300)
